---
import vertexSource from "./vertex.vs?raw";
import fragmentSource from "./fragment.fs?raw";
---

<canvas width="300" height="300" id="my_branch"></canvas>

<script define:vars={{ vertexSource, fragmentSource }}>
  /* Step1: Prepare the canvas and get WebGL context */

  var canvas = document.getElementById("my_branch");
  // @ts-ignore
  var gl = canvas.getContext("webgl2");

  /* Step2: Define the geometry and store it in buffer objects */

  var controll_points = [-0.8, 0.5, -0.5, -0.5, 1.0, -0.5];

  // Create a new buffer object
  var controll_point_buffer = gl.createBuffer();

  // Bind an empty array buffer to it
  gl.bindBuffer(gl.ARRAY_BUFFER, controll_point_buffer);

  // Pass the vertices data to the buffer
  gl.bufferData(
    gl.ARRAY_BUFFER,
    new Float32Array(controll_points),
    gl.STATIC_DRAW
  );

  // Unbind the buffer
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  // Create a shader program object to store combined shader program
  var shaderProgram = gl.createProgram();

  /* Step3: Create and compile Shader programs */
  // VERTEX SHADER
  //Create a vertex shader object
  var vertShader = gl.createShader(gl.VERTEX_SHADER);
  //Attach vertex shader source code
  gl.shaderSource(vertShader, vertexSource);
  //Compile the vertex shader
  gl.compileShader(vertShader);
  // Attach a vertex shader
  gl.attachShader(shaderProgram, vertShader);

  // FRAGMENT SHDER
  // Create fragment shader object
  var fragShader = gl.createShader(gl.FRAGMENT_SHADER);
  // Attach fragment shader source code
  gl.shaderSource(fragShader, fragmentSource);
  // Compile the fragment shader
  gl.compileShader(fragShader);
  // Attach a fragment shader
  gl.attachShader(shaderProgram, fragShader);

  // Link both programs
  gl.linkProgram(shaderProgram);

  // Use the combined shader program object
  gl.useProgram(shaderProgram);

  /* Step 4: Associate the shader programs to buffer objects */
  //Bind vertex buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, controll_point_buffer);

  //Get the attribute location
  var coord = gl.getAttribLocation(shaderProgram, "coordinates");

  //point an attribute to the currently bound VBO
  gl.vertexAttribPointer(coord, 2, gl.FLOAT, false, 0, 0);

  //Enable the attribute
  gl.enableVertexAttribArray(coord);

  /* Step5: Drawing the required object (triangle) */

  // Clear the canvas
  gl.clearColor(1, 1, 1, 1);

  // // Enable the depth test
  // gl.enable(gl.DEPTH_TEST);

  // Clear the color buffer bit
  gl.clear(gl.COLOR_BUFFER_BIT);

  // Set the view port
  gl.viewport(0, 0, canvas.width, canvas.height);

  // Draw the triangle
  gl.drawArrays(gl.LINE_LOOP, 0, 3);
  // gl.drawArrays(gl.LINE_LOOP, 0, 3);
</script>
